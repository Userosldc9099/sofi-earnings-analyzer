import os
from datetime import datetime
from openai import OpenAI
from utils.report_loader import get_report_text
from utils.telegram import send_telegram

openai_api_key = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=openai_api_key)

TICKERS = ["SOFI"]  # —Å—é–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å "TSLA", "UPST", –∏ —Ç.–¥.

def build_prompt(ticker: str, report_text: str) -> str:
    return f"""
–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç {ticker}:

{report_text[:4000]}

1. –ü—Ä–µ–≤–∑–æ—à–ª–∞ –ª–∏ {ticker} –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ EPS –∏ –≤—ã—Ä—É—á–∫–µ?
2. –£–ª—É—á—à–∏–ª–∏—Å—å –ª–∏ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∫–≤–∞—Ä—Ç–∞–ª–æ–º?
3. –ö–∞–∫ –æ—Ü–µ–Ω–∏—Ç—å guidance? –õ—É—á—à–µ / —Ö—É–∂–µ / –≤ —Ä–∞–º–∫–∞—Ö?
4. –ï—Å—Ç—å –ª–∏ —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã, —Ä–∏—Å–∫–∏ –∏–ª–∏ —Å—é—Ä–ø—Ä–∏–∑—ã?
5. –í—ã–≤–æ–¥: –ø–æ–∫—É–ø–∞—Ç—å, –¥–µ—Ä–∂–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –∞–∫—Ü–∏–∏? –û–±—ä—è—Å–Ω–∏ —Ä–µ—à–µ–Ω–∏–µ.
"""

def analyze_ticker(ticker: str):
    print(f"üîç –ê–Ω–∞–ª–∏–∑ {ticker}")
    report = get_report_text(ticker)

    if not report or len(report.strip()) < 20:
        print(f"‚ö†Ô∏è –û—Ç—á–µ—Ç –ø–æ {ticker} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        send_telegram(f"‚ö†Ô∏è –ù–µ—Ç –æ—Ç—á–µ—Ç–∞ –¥–ª—è {ticker}")
        return

    prompt = build_prompt(ticker, report)

    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.3
        )
        result = response.choices[0].message.content
        print("‚úÖ GPT —Ä–µ–∑—É–ª—å—Ç–∞—Ç:", result[:200])

        # –û—á–∏—Å—Ç–∫–∞ –æ—Ç Markdown-—Å–±–æ–µ–≤
        clean = result.replace("*", "").replace("_", "").replace("`", "").replace("~", "").replace(">", "")
        send_telegram(f"üìä {ticker} Earnings ({datetime.today().date()}):\n{clean[:3900]}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {ticker}: {e}")
        send_telegram(f"‚ùå GPT –æ—à–∏–±–∫–∞ –ø–æ {ticker}: {str(e)}")

if __name__ == "__main__":
    for ticker in TICKERS:
        analyze_ticker(ticker)
